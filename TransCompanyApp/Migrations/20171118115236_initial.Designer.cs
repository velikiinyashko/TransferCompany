// <auto-generated />
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage;
using Microsoft.EntityFrameworkCore.Storage.Internal;
using System;
using TransCompanyApp.Models;

namespace TransCompanyApp.Migrations
{
    [DbContext(typeof(BaseContext))]
    [Migration("20171118115236_initial")]
    partial class initial
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.0.0-rtm-26452")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("TransCompanyApp.Models.Address", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Comment");

                    b.Property<string>("Home");

                    b.Property<int?>("OrderId");

                    b.Property<string>("Street");

                    b.HasKey("Id");

                    b.HasIndex("OrderId");

                    b.ToTable("Address");
                });

            modelBuilder.Entity("TransCompanyApp.Models.billing.Client", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.HasKey("Id");

                    b.ToTable("Clients");
                });

            modelBuilder.Entity("TransCompanyApp.Models.CarManufacture", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.ToTable("CarManufactures");
                });

            modelBuilder.Entity("TransCompanyApp.Models.CarModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int?>("CarManufactureId");

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.HasIndex("CarManufactureId");

                    b.ToTable("CarModels");
                });

            modelBuilder.Entity("TransCompanyApp.Models.Company", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Address");

                    b.Property<int>("BIK");

                    b.Property<string>("Country");

                    b.Property<int>("INN");

                    b.Property<int>("KPP");

                    b.Property<string>("Name");

                    b.Property<int>("OGRN");

                    b.Property<string>("PostIndex");

                    b.Property<string>("Sity");

                    b.HasKey("Id");

                    b.ToTable("Companys");
                });

            modelBuilder.Entity("TransCompanyApp.Models.Contact", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Address");

                    b.Property<string>("City");

                    b.Property<string>("Country");

                    b.Property<string>("Email");

                    b.Property<string>("Region");

                    b.Property<string>("Telephone");

                    b.HasKey("Id");

                    b.ToTable("Contacts");
                });

            modelBuilder.Entity("TransCompanyApp.Models.Driver", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Name");

                    b.Property<string>("Surname");

                    b.Property<string>("Telephone");

                    b.HasKey("Id");

                    b.ToTable("Drivers");
                });

            modelBuilder.Entity("TransCompanyApp.Models.Order", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Email");

                    b.Property<string>("Name");

                    b.Property<string>("Phone");

                    b.Property<int?>("StatisId");

                    b.Property<int?>("StatusId");

                    b.Property<string>("Surname");

                    b.Property<int?>("TariffId");

                    b.Property<DateTime>("TimeCreate");

                    b.Property<int?>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("StatusId");

                    b.HasIndex("TariffId");

                    b.HasIndex("UserId");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("TransCompanyApp.Models.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.ToTable("Roles");
                });

            modelBuilder.Entity("TransCompanyApp.Models.Status", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.ToTable("Status");
                });

            modelBuilder.Entity("TransCompanyApp.Models.Tariff", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<decimal>("PricePerKm");

                    b.Property<string>("TariffName");

                    b.HasKey("Id");

                    b.ToTable("Tariffs");
                });

            modelBuilder.Entity("TransCompanyApp.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<byte>("Avatar");

                    b.Property<int?>("CompanyId");

                    b.Property<string>("Email");

                    b.Property<string>("Login");

                    b.Property<string>("Name");

                    b.Property<string>("Password");

                    b.Property<string>("Phone");

                    b.Property<int?>("RoleId");

                    b.Property<string>("Surname");

                    b.Property<string>("Token");

                    b.Property<bool>("Verificate");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.HasIndex("RoleId");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("TransCompanyApp.Models.Address", b =>
                {
                    b.HasOne("TransCompanyApp.Models.Order", "Order")
                        .WithMany("Address")
                        .HasForeignKey("OrderId");
                });

            modelBuilder.Entity("TransCompanyApp.Models.CarModel", b =>
                {
                    b.HasOne("TransCompanyApp.Models.CarManufacture", "Manufacture")
                        .WithMany("Models")
                        .HasForeignKey("CarManufactureId");
                });

            modelBuilder.Entity("TransCompanyApp.Models.Order", b =>
                {
                    b.HasOne("TransCompanyApp.Models.Status", "Status")
                        .WithMany()
                        .HasForeignKey("StatusId");

                    b.HasOne("TransCompanyApp.Models.Tariff", "Tariff")
                        .WithMany()
                        .HasForeignKey("TariffId");

                    b.HasOne("TransCompanyApp.Models.User", "User")
                        .WithMany("Orders")
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("TransCompanyApp.Models.User", b =>
                {
                    b.HasOne("TransCompanyApp.Models.Company", "Company")
                        .WithMany("Users")
                        .HasForeignKey("CompanyId");

                    b.HasOne("TransCompanyApp.Models.Role", "Role")
                        .WithMany("Users")
                        .HasForeignKey("RoleId");
                });
#pragma warning restore 612, 618
        }
    }
}
